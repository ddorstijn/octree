!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
INNER_NODE	src/octree.h	13;"	d
LEAF_NODE	src/octree.h	14;"	d
MINIMUM_INITIAL_CAPACITY	src/unordered_map.c	/^static const size_t MINIMUM_INITIAL_CAPACITY = 16;$/;"	v	file:
MINIMUM_LOAD_FACTOR	src/unordered_map.c	/^static const float  MINIMUM_LOAD_FACTOR = 0.2f;$/;"	v	file:
OCTREE_API	src/octree.h	5;"	d
OCTREE_API	src/octree.h	7;"	d
OCTREE_H	src/octree.h	2;"	d
OctreeBaseNode	src/octree.h	/^    } OctreeBaseNode;$/;"	t	typeref:struct:_OctreeBaseNode
OctreeContainer	src/octree.h	/^    } OctreeContainer;$/;"	t	typeref:struct:_OctreeContainer
OctreeInnerNode	src/octree.h	/^    } OctreeInnerNode;$/;"	t	typeref:struct:_OctreeInnerNode
OctreeLeafNode	src/octree.h	/^    } OctreeLeafNode;$/;"	t	typeref:struct:_OctreeLeafNode
SOURCES	Makefile	/^SOURCES = src\/octree.c src\/unordered_map.c$/;"	m
UNORDERED_MAP_H	src/unordered_map.h	2;"	d
_OctreeBaseNode	src/octree.h	/^    typedef struct _OctreeBaseNode$/;"	s
_OctreeContainer	src/octree.h	/^    typedef struct _OctreeContainer$/;"	s
_OctreeInnerNode	src/octree.h	/^    typedef struct _OctreeInnerNode$/;"	s
_OctreeLeafNode	src/octree.h	/^    typedef struct _OctreeLeafNode$/;"	s
base	src/octree.h	/^        OctreeBaseNode base;$/;"	m	struct:_OctreeInnerNode
base	src/octree.h	/^        OctreeBaseNode base;$/;"	m	struct:_OctreeLeafNode
chain_next	src/unordered_map.c	/^    struct unordered_map_entry* chain_next;$/;"	m	struct:unordered_map_entry	typeref:struct:unordered_map_entry::unordered_map_entry	file:
child_exists	src/octree.h	/^        uint8_t child_exists;$/;"	m	struct:_OctreeInnerNode
ensure_capacity	src/unordered_map.c	/^static void ensure_capacity(unordered_map* map) $/;"	f	file:
equals_func	src/octree.c	/^equals_func(void* key1, void* key2)$/;"	f
equals_function	src/unordered_map.c	/^    bool                (*equals_function)(void*, void*);$/;"	m	struct:unordered_map	file:
expected_mod_count	src/unordered_map.c	/^    size_t               expected_mod_count;$/;"	m	struct:unordered_map_iterator	file:
fix_initial_capacity	src/unordered_map.c	/^static size_t fix_initial_capacity(size_t initial_capacity) $/;"	f	file:
fix_load_factor	src/unordered_map.c	/^static float fix_load_factor(float load_factor)$/;"	f	file:
hash_func	src/octree.c	/^hash_func(void* key)$/;"	f
hash_function	src/unordered_map.c	/^    size_t              (*hash_function)(void*);$/;"	m	struct:unordered_map	file:
head	src/unordered_map.c	/^    unordered_map_entry*  head;$/;"	m	struct:unordered_map	file:
inner_count	src/octree.h	/^        size_t inner_count;$/;"	m	struct:_OctreeContainer
iterated_count	src/unordered_map.c	/^    size_t               iterated_count;$/;"	m	struct:unordered_map_iterator	file:
key	src/unordered_map.c	/^    void*                       key;$/;"	m	struct:unordered_map_entry	file:
leaf_count	src/octree.h	/^        size_t leaf_count;$/;"	m	struct:_OctreeContainer
load_factor	src/unordered_map.c	/^    float                 load_factor;$/;"	m	struct:unordered_map	file:
location_code	src/octree.h	/^        uint64_t location_code;$/;"	m	struct:_OctreeBaseNode
main	src/main.c	/^main()$/;"	f
main	test/test.c	/^main()$/;"	f
map	src/unordered_map.c	/^    unordered_map*       map;$/;"	m	struct:unordered_map_iterator	file:
mask	src/unordered_map.c	/^    size_t                mask;$/;"	m	struct:unordered_map	file:
max_allowed_size	src/unordered_map.c	/^    size_t                max_allowed_size;$/;"	m	struct:unordered_map	file:
maxf	src/unordered_map.c	/^static float maxf(float a, float b) $/;"	f	file:
maxi	src/unordered_map.c	/^static int maxi(int a, int b) $/;"	f	file:
mod_count	src/unordered_map.c	/^    size_t                mod_count;$/;"	m	struct:unordered_map	file:
next	src/unordered_map.c	/^    struct unordered_map_entry* next;$/;"	m	struct:unordered_map_entry	typeref:struct:unordered_map_entry::unordered_map_entry	file:
next_entry	src/unordered_map.c	/^    unordered_map_entry* next_entry;$/;"	m	struct:unordered_map_iterator	file:
nodes	src/octree.h	/^        unordered_map* nodes;$/;"	m	struct:_OctreeContainer
object_index	src/octree.h	/^        uint64_t object_index;$/;"	m	struct:_OctreeLeafNode
object_positions	src/octree.h	/^        float** object_positions;$/;"	m	struct:_OctreeContainer
oct_find_leaf_node	src/octree.c	/^oct_find_leaf_node(OctreeContainer* octree, OctreeBaseNode* node,$/;"	f
oct_node_get_child	src/octree.c	/^oct_node_get_child(OctreeContainer* octree, uint64_t location_code,$/;"	f
oct_node_get_parent	src/octree.c	/^oct_node_get_parent(OctreeContainer* octree, OctreeBaseNode* node)$/;"	f
oct_node_get_position	src/octree.c	/^oct_node_get_position(OctreeContainer* octree, OctreeBaseNode* node)$/;"	f
oct_node_get_tree_depth	src/octree.c	/^oct_node_get_tree_depth(OctreeContainer* octree, const OctreeBaseNode* node)$/;"	f
oct_node_init_inner	src/octree.c	/^oct_node_init_inner(OctreeContainer* octree, uint64_t location_code)$/;"	f
oct_node_init_leaf	src/octree.c	/^oct_node_init_leaf(OctreeContainer* octree, uint64_t parent_location,$/;"	f
oct_node_lookup	src/octree.c	/^oct_node_lookup(OctreeContainer* octree, uint64_t location_code)$/;"	f
oct_node_split_leaf_node	src/octree.c	/^oct_node_split_leaf_node(OctreeContainer* octree, OctreeLeafNode* node)$/;"	f
oct_octree_build	src/octree.c	/^oct_octree_build(OctreeContainer* octree, float** object_positions,$/;"	f
oct_octree_free	src/octree.c	/^oct_octree_free(OctreeContainer* octree)$/;"	f
oct_octree_init	src/octree.c	/^oct_octree_init(float* position, size_t size)$/;"	f
oct_visit_all	src/octree.c	/^oct_visit_all(OctreeContainer* octree, OctreeBaseNode* node)$/;"	f
position	src/octree.h	/^        float* position;$/;"	m	struct:_OctreeContainer
prev	src/unordered_map.c	/^    struct unordered_map_entry* prev;$/;"	m	struct:unordered_map_entry	typeref:struct:unordered_map_entry::unordered_map_entry	file:
root_node	src/octree.h	/^        void* root_node;$/;"	m	struct:_OctreeContainer
size	src/octree.h	/^        size_t size;$/;"	m	struct:_OctreeContainer
size	src/unordered_map.c	/^    size_t                size;$/;"	m	struct:unordered_map	file:
table	src/unordered_map.c	/^    unordered_map_entry** table;$/;"	m	struct:unordered_map	file:
table_capacity	src/unordered_map.c	/^    size_t                table_capacity;$/;"	m	struct:unordered_map	file:
tail	src/unordered_map.c	/^    unordered_map_entry*  tail;$/;"	m	struct:unordered_map	file:
type	src/octree.h	/^        uint8_t type;$/;"	m	struct:_OctreeBaseNode
unordered_map	src/unordered_map.c	/^struct unordered_map {$/;"	s	file:
unordered_map	src/unordered_map.h	/^    typedef struct unordered_map          unordered_map;$/;"	t	typeref:struct:unordered_map
unordered_map_alloc	src/unordered_map.c	/^unordered_map* unordered_map_alloc(size_t initial_capacity,$/;"	f
unordered_map_clear	src/unordered_map.c	/^void unordered_map_clear(unordered_map* map)$/;"	f
unordered_map_contains_key	src/unordered_map.c	/^bool unordered_map_contains_key(unordered_map* map, void* key)$/;"	f
unordered_map_entry	src/unordered_map.c	/^typedef struct unordered_map_entry {$/;"	s	file:
unordered_map_entry	src/unordered_map.c	/^} unordered_map_entry;$/;"	t	typeref:struct:unordered_map_entry	file:
unordered_map_entry_alloc	src/unordered_map.c	/^static unordered_map_entry* unordered_map_entry_alloc(void* key, void* value)$/;"	f	file:
unordered_map_free	src/unordered_map.c	/^void unordered_map_free(unordered_map* map)$/;"	f
unordered_map_get	src/unordered_map.c	/^void* unordered_map_get(unordered_map* map, void* key)$/;"	f
unordered_map_is_healthy	src/unordered_map.c	/^bool unordered_map_is_healthy(unordered_map* map)$/;"	f
unordered_map_iterator	src/unordered_map.c	/^struct unordered_map_iterator {$/;"	s	file:
unordered_map_iterator	src/unordered_map.h	/^    typedef struct unordered_map_iterator unordered_map_iterator;$/;"	t	typeref:struct:unordered_map_iterator
unordered_map_iterator_alloc	src/unordered_map.c	/^unordered_map_iterator_alloc(unordered_map* map)$/;"	f
unordered_map_iterator_free	src/unordered_map.c	/^void unordered_map_iterator_free(unordered_map_iterator* iterator)$/;"	f
unordered_map_iterator_has_next	src/unordered_map.c	/^size_t unordered_map_iterator_has_next(unordered_map_iterator* iterator)$/;"	f
unordered_map_iterator_is_disturbed	src/unordered_map.c	/^bool unordered_map_iterator_is_disturbed(unordered_map_iterator* iterator)$/;"	f
unordered_map_iterator_next	src/unordered_map.c	/^bool unordered_map_iterator_next(unordered_map_iterator* iterator, $/;"	f
unordered_map_put	src/unordered_map.c	/^void* unordered_map_put(unordered_map* map, void* key, void* value)$/;"	f
unordered_map_remove	src/unordered_map.c	/^void* unordered_map_remove(unordered_map* map, void* key)$/;"	f
unordered_map_size	src/unordered_map.c	/^size_t unordered_map_size(unordered_map* map)$/;"	f
value	src/unordered_map.c	/^    void*                       value;$/;"	m	struct:unordered_map_entry	file:
